using UnityEngine;
using System.Collections;
using UnityEngine.SceneManagement;

public class HeroineCode : MonoBehaviour
{
    [Header("–î–∏–∞–ª–æ–≥–∏ / –î–æ–ø. –°—Å—ã–ª–∫–∏")]
    public DialogBox dialog;

    [Header("–î–≤–∏–∂–µ–Ω–∏–µ –≥–µ—Ä–æ–∏–Ω–∏")]
    public Transform[] waypoints;
    public float moveSpeed = 2f;
    public float stopDistance = 0.1f;
    public float waitAfterTeleport = 0.5f;

    [Header("–ê–Ω–∏–º–∞—Ü–∏—è")]
    public Animator animator;

    private int currentPoint = 0;
    private bool isMoving = false;
    private bool waitingForBoard = false;

    private void StartMoving()
    {
        if (waypoints.Length > 0)
            MoveToNextPoint();
        else
            Debug.LogWarning("‚ö†Ô∏è Heroine has no waypoints assigned!");
    }

    public void PlayAnim()
    {
        animator.Play("Idle");
        Invoke(nameof(StartMoving), 1f);
    }

    private void Update()
    {
        if (!isMoving || waitingForBoard || waypoints.Length == 0) return;

        Transform target = waypoints[currentPoint];
        Vector3 direction = (target.position - transform.position).normalized;

        // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        transform.position += direction * moveSpeed * Time.deltaTime;

        // –†–∞–∑–≤–æ—Ä–æ—Ç
        if (direction.x > 0.1f)
            transform.localScale = new Vector3(1, 1, 1) * 0.62f;
        else if (direction.x < -0.1f)
            transform.localScale = new Vector3(-1, 1, 1) * 0.62f;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ç–æ—á–∫–∏
        if (Vector3.Distance(transform.position, target.position) <= stopDistance)
        {
            ReachPoint();
        }
    }

    private void MoveToNextPoint()
    {
        if (currentPoint >= waypoints.Length)
        {
            isMoving = false;
            animator.Play("Idle");
            return;
        }

        Transform target = waypoints[currentPoint];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–ø—Ä—ã–∂–∫–æ–≤—É—é" —Ç–æ—á–∫—É
        if (target.CompareTag("JumpPoint") || target.CompareTag("DownPoint"))
        {
            transform.position = target.position;
            animator.Play("Idle");
            currentPoint++;
            Invoke(nameof(MoveToNextPoint), waitAfterTeleport);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–∫—É —Å —Ç–µ–≥–æ–º Switch1 (–≥–¥–µ –∂–¥—ë–º –ø–∞–¥–µ–Ω–∏–µ –¥–æ—Å–∫–∏)
        if (target.CompareTag("Switch1"))
        {
            StartCoroutine(WaitForBoardToFall(target));
            return;
        }

        // –û–±—ã—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        isMoving = true;
        animator.Play("Walking");
    }

    private void ReachPoint()
    {
        isMoving = false;
        animator.Play("Idle");

        currentPoint++;
        if (currentPoint < waypoints.Length)
            Invoke(nameof(MoveToNextPoint), 1f);
    }

    // üëá –û–∂–∏–¥–∞–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è –¥–æ—Å–∫–∏
    private IEnumerator WaitForBoardToFall(Transform target)
    {
        waitingForBoard = true;
        animator.Play("Idle");

        // –ò—â–µ–º –¥–æ—Å–∫—É —Ä—è–¥–æ–º —Å —ç—Ç–æ–π –ø–ª–∏—Ç–∫–æ–π
        FallingBoard board = target.GetComponentInChildren<FallingBoard>();
        if (board == null && board.isFalling==true)
        {
            Debug.LogWarning("‚ö†Ô∏è –ù–∞ —Ç–æ—á–∫–µ Switch1 –Ω–µ—Ç FallingBoard!");
            waitingForBoard = false;
            currentPoint++;
            yield return new WaitForSeconds(1f);
            MoveToNextPoint();
            yield break;
        }

        // –ñ–¥—ë–º, –ø–æ–∫–∞ –¥–æ—Å–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –ø–∞–¥–∞—Ç—å
        yield return new WaitUntil(() => !board.isFalling);

        waitingForBoard = false;
        currentPoint++;
        yield return new WaitForSeconds(1f);
        MoveToNextPoint();
    }

    // üíé –ö–æ–≥–¥–∞ –≥–µ—Ä–æ–∏–Ω—è –≤—Ö–æ–¥–∏—Ç –≤ –∑–æ–Ω—É –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Crystal"))
        {
            isMoving = false;
            animator.Play("Idle");

            dialog.StartDialogue(2); // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ (–ø—Ä–∏–º–µ—Ä)

            Debug.Log("‚ú® Crystal –Ω–∞–π–¥–µ–Ω! –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã!");
            // –¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å—Ü–µ–Ω—É –∫–æ–Ω—Ü–∞, –∏–ª–∏ —á—Ç–æ –Ω—É–∂–Ω–æ:
            Invoke("CallEnd", 4f);
        }
    }

    private void CallEnd()
    {
        SceneManager.LoadScene("End");
    }
}
